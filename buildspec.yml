version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18  # Adjust according to your project requirements
    commands:
      - echo "Checking AWS CLI installation..."
      - if aws --version; then echo "AWS CLI is already installed, skipping installation."; else 
        echo "Installing AWS CLI...";
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip";
        unzip awscliv2.zip;
        sudo ./aws/install;
        fi
      - aws --version  # Verify AWS CLI version
  

  
      - echo "Configuring AWS CLI..."
      - mkdir -p ~/.aws
      - echo "[default]" > ~/.aws/credentials
      - echo "aws_access_key_id=" $AWS_ACCESS_KEY_ID >> ~/.aws/credentials
      - echo "aws_secret_access_key=" $AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials
      - echo "Retrieving AWS credentials from Secrets Manager..."
    
      - aws secretsmanager get-secret-value --secret-id your-secret-id --query SecretString --output text > credentials.json
      - export AWS_ACCESS_KEY_ID=$(jq -r .AWS_ACCESS_KEY_ID credentials.json)
      - export AWS_SECRET_ACCESS_KEY=$(jq -r .AWS_SECRET_ACCESS_KEY credentials.json)
      
      # Confirm that the credentials are loaded correctly
      - echo "AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are set."
      - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
      - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      - aws configure set region us-east-1  # Change to your AWS region
      - echo "[default]" > ~/.aws/credentials
      - echo "aws_access_key_id=" $AWS_ACCESS_KEY_ID >> ~/.aws/credentials
      - echo "aws_secret_access_key=" $AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials

  
artifacts:
  baseDirectory: dist  # Ensure this is correct for your project output folder
  files:
    - '**/*'

cache:
  paths:
    - node_modules/**/*  # Cache node_modules to reuse dependencies




# version: 0.2
# backend:
#   phases:
#     build:
#       commands:
#         - '# Execute Amplify CLI with the helper script'
#         - amplifyPush --simple
# frontend:
#   phases:
#     preBuild:
#       commands:
#         - yarn install --frozen-lockfile
#     build:
#       commands:
#         - yarn run build
#   artifacts:
#     baseDirectory: dist
#     files:
#       - '**/*'
#   cache:
#     paths:
#       - node_modules/**/*
