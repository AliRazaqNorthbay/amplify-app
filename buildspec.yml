version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18  # Adjust according to your project requirements
    commands:
      - echo "Checking AWS CLI installation..."
      - if aws --version; then echo "AWS CLI is already installed, skipping installation."; else 
        echo "Installing AWS CLI..."; 
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"; 
        unzip awscliv2.zip; 
        sudo ./aws/install; 
        fi
      - aws --version  # Verify AWS CLI version
      - echo "Configuring AWS CLI..."
      - mkdir -p ~/.aws
      - echo "[default]" > ~/.aws/credentials
      - echo "aws_access_key_id=" $AWS_ACCESS_KEY_ID >> ~/.aws/credentials
      - echo "aws_secret_access_key=" $AWS_SECRET_ACCESS_KEY >> ~/.aws/credentials
      - echo "AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are set."

      # Assume the role that has Secrets Manager access
      - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::211125344531:role/service-role/codebuild-aws-amplify-code-build-service-role --role-session-name codebuild-session --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID=$(echo $CREDENTIALS | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $CREDENTIALS | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $CREDENTIALS | jq -r .Credentials.SessionToken)

      # Now fetch the secret value using the assumed credentials
      - aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:us-east-1:211125344531:secret:aws-cred-IsEPiR

artifacts:
  baseDirectory: dist
  files:
    - '**/*'

cache:
  paths:
    - node_modules/**/*  # Cache node_modules to reuse dependencies
